import org.apache.spark.sql.SparkSession
import spark.implicits._
SparkSession.getActiveSession.foreach(_.stop())
val spark = SparkSession.builder().appName("Read from Elasticsearch").config("spark.es.nodes", "localhost").config("spark.es.port", "9200").master("local[*]")
val spark2 =spark.getOrCreate()
val deputesDF = spark2.read.format("org.elasticsearch.spark.sql")
  .option("es.read.field.as.array.include", "emails,anciens_mandats,site_web")
val dpDF = deputesDF.load("deputes")


# Calcul de la moyenne des amendements adoptés
 val moyenneAmendementsAdoptes = dpDF.filter($"amendements_adoptes".isNotNull).agg(avg($"amendements_adoptes"))
 moyenneAmendementsAdoptes.show()
+------------------------+
|avg(amendements_adoptes)|
+------------------------+
|       371.6666666666667|
+------------------------+

# Calculer la moyenne des présences en commission par député
val moyennePresencesCommission = dpDF.filter($"commission_presences".isNotNull).agg(avg($"commission_presences"))
moyennePresencesCommission.show()
+-------------------------+
|avg(commission_presences)|
+-------------------------+
|                    122.5|
+-------------------------+

# Calculer le nombre total de questions écrites posées par tous les députés
val totalQuestionsEcrites = dpDF.agg(sum($"questions_ecrites")).alias("total_questions_ecrites")
totalQuestionsEcrites.show()
totalQuestionsEcrites.show()
+----------------------+
|sum(questions_ecrites)|
+----------------------+
|                   188|
+----------------------+


